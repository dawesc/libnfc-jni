/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <uk_co_polarmoment_bacta_libnfc_jni_jni_SnepServer.h>

/* LLCP from LibNFC */
#include <err.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

#include <llcp.h>
#include <llc_service.h>
#include <llc_link.h>
#include <mac.h>
#include <llc_connection.h>
/* LLCP from LibNFC */

#include <memory>

namespace {
class SnepServer {
public:
	void StopMacLink(int sig);
	void Bye(void);
    size_t shexdump(char *dest, const uint8_t *buf, const size_t size);
	void* com_android_snep_thread(void *arg);
	void print_usage(char *progname);
	void run();

private:
	std::unique_ptr<struct mac_link> macLink;
	std::unique_ptr<nfc_device> device;
};

void SnepServer::StopMacLink(int sig) {
  (void) sig;

  if (macLink && macLink->device)
	nfc_abort_command(macLink->device);
}


void SnepServer::Bye(void) {
  if (device)
	nfc_close(device);
}

size_t SnepServer::shexdump(char *dest, const uint8_t *buf, const size_t size) {
  size_t res = 0;
  for (size_t s = 0; s < size; s++) {
	sprintf(dest + res, "%02x  ", *(buf + s));
	res += 4;
  }
  return res;
}

void* SnepServer::com_android_snep_thread(void *arg) {
  struct llc_connection *connection = (struct llc_connection *) arg;
  uint8_t buffer[1024], frame[1024];

  int len;
  if ((len = llc_connection_recv(connection, buffer, sizeof(buffer), NULL)) < 0)
	return NULL;

  if (len < 2) // SNEP's header (2 bytes)  and NDEF entry header (5 bytes)
	return NULL;

  size_t n = 0;

  // Header
  fprintf(info_stream, "SNEP version: %d.%d\n", (buffer[0]>>4), (buffer[0]&0x0F));
  if (buffer[n++] != 0x10){
	printf("snep-server is developed to support snep version 1.0, version %d.%d may be not supported.\n", (buffer[0]>>4), (buffer[0]&0x0F));
  }
  switch(buffer[1]){
	case 0x00:      /** Continue */
	  break;
	case 0x01:      /** GET */
	  break;
	case 0x02:      /** PUT */
	  {
		uint32_t ndef_length = be32toh(*((uint32_t *)(buffer + 2)));  // NDEF length
		if ((len - 6) < ndef_length)
		  return NULL; // Less received bytes than expected ?

		/** return snep success response package */
		frame[0] = 0x10;    /** SNEP version */
		frame[1] = 0x81;
		frame[2] = 0;
		frame[3] = 0;
		frame[4] = 0;
		frame[5] = 0;
		llc_connection_send(connection, frame, 6);

		char ndef_msg[1024];
		shexdump(ndef_msg, buffer + 6, ndef_length);
		fprintf(info_stream, "NDEF message received (%u bytes): %s\n", ndef_length, ndef_msg);

		if (ndef_stream) {
		  if (fwrite(buffer + 6, 1, ndef_length, ndef_stream) != ndef_length) {
			fprintf(stderr, "Could not write to file.\n");
			fclose(ndef_stream);
			ndef_stream = NULL;
		  } else {
			fclose(ndef_stream);
			ndef_stream = NULL;
		  }
		}
	  }
	  break;
  }

  // TODO Stop the LLCP when this is reached
  llc_connection_stop(connection);
  return NULL;
}

void SnepServer::print_usage(char *progname) {
  fprintf(stderr, "usage: %s -o FILE\n", progname);
  fprintf(stderr, "\nOptions:\n");
  fprintf(stderr, "  -o     Extract NDEF message if available in FILE\n");
}


void SnepServer::run() {
  std:unique_ptr<nfc_context, decltype(nfc_exit)*> context;
  {
	  nfc_context* contextTmp;
	  nfc_init(&contextTmp);
	  context = decltype(context)(contextTmp);
  }

  if (llcp_init() < 0)
	errx(EXIT_FAILURE, "llcp_init()");

  signal(SIGINT, stop_mac_link);
  atexit(bye);

  if (!(device = nfc_open(context, NULL))) {
	errx(EXIT_FAILURE, "Cannot connect to NFC device");
  }

  struct llc_link *llc_link = llc_link_new();
  if (!llc_link) {
	errx(EXIT_FAILURE, "Cannot allocate LLC link data structures");
  }

  struct llc_service *com_android_snep;
  if (!(com_android_snep = llc_service_new_with_uri(NULL, com_android_snep_thread, "urn:nfc:sn:snep", NULL)))
	errx(EXIT_FAILURE, "Cannot create com.android.snep service");

  llc_service_set_miu(com_android_snep, 512);
  llc_service_set_rw(com_android_snep, 2);

  if (llc_link_service_bind(llc_link, com_android_snep, LLCP_SNEP_SAP) < 0)
	errx(EXIT_FAILURE, "Cannot bind service");

  macLink = mac_link_new(device, llc_link);
  if (!macLink)
	errx(EXIT_FAILURE, "Cannot create MAC link");

  if (mac_link_activate_as_target(macLink) < 0) {
	errx(EXIT_FAILURE, "Cannot activate MAC link");
  }

  void *err;
  mac_link_wait(macLink, &err);

  mac_link_free(macLink);
  llc_link_free(llc_link);

  nfc_close(device);
  device = NULL;

  llcp_fini();
  contextTmp.reset();
}

}

/*
 * Class:     uk_co_polarmoment_bacta_libnfc_jni_jni_SnepServer
 * Method:    runSnepServer
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_uk_co_polarmoment_bacta_libnfc_1jni_jni_SnepServer_runSnepServer
  (JNIEnv *env , jobject thisObj) {

}
